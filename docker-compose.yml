version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: csl-postgres
    environment:
      POSTGRES_DB: cultural_sound_lab
      POSTGRES_USER: csl_user
      POSTGRES_PASSWORD: csl_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U csl_user -d cultural_sound_lab"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - csl-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: csl-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - csl-network

  # MinIO Object Storage (S3 replacement)
  minio:
    image: minio/minio:latest
    container_name: csl-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - csl-network

  # API Backend
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: csl-api
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://csl_user:csl_password@postgres:5432/cultural_sound_lab
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: cultural-audio
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./assets:/app/assets:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - csl-network

  # Frontend Web App
  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    container_name: csl-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_STORAGE_URL: http://localhost:9000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - csl-network

  # Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: csl-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - csl-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: csl-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - csl-network

  # Load Testing Service
  k6:
    image: grafana/k6:latest
    container_name: csl-k6
    volumes:
      - ./docker/k6:/scripts
    networks:
      - csl-network
    profiles:
      - testing

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: docker/backup/Dockerfile
    container_name: csl-backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: cultural_sound_lab
      POSTGRES_USER: csl_user
      POSTGRES_PASSWORD: csl_password
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
    volumes:
      - backup_data:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - postgres
      - minio
    networks:
      - csl-network
    profiles:
      - backup

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  backup_data:

networks:
  csl-network:
    driver: bridge